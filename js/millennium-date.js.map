{"version":3,"sources":["../ts/millennium-date.ts"],"names":["millennium_month_1","require","millennium_date_math_1","millennium_timespan_1","millennium_date_builder_1","millennium_time_unit_1","MillenniumDate","[object Object]","epochTime","offsetHours","this","undefined","now","Date","getTime","getTimezoneOffset","date","MillenniumDateMath","isYearLeapYear","getYear","leapYearBeingInspected","millisecondApproximation","getAdjustedEpochTime","yearApproximation","EPOCH_YEAR","MillenniumTimeUnit","YEAR","getMilliseconds","Math","floor","DAY","year","beginningOfYear","MillenniumDateBuilder","withYear","build","dayInYear","MillenniumTimespan","between","toDays","MillenniumMonth","getMonthByDayInYear","beginningOfMonth","withMonth","getMonth","beginningOfDay","withDay","getDayOfMonth","toHours","zeroIndexed","getHourOfDay24HourZeroIndexed","getHourOfDay24Hour","beginningOfHour","withHours","toMinutes","beginningOfMinute","withMinutes","getMinuteOfHour","toSeconds","beginningOfSecond","withSeconds","getSecondOfMinute","toMilliseconds","getEpochTime","getUTCOffset","HOUR","month","getMonthName","day","ordinalIndicator","getOrdinalIndicator","utcString","hour","getHourOfDay12Hour","toString","minute","second","millisecond","getMillisecondOfSecond","period","get12HourPeriod","length","exports"],"mappings":"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","file":"millennium-date.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t5:00 PM -- January 28th, 2019.\n *\tProject: millennium\n */\n\nimport { MillenniumMonth } from \"./millennium-month\";\nimport { MillenniumDateMath } from \"./millennium-date-math\";\nimport { MillenniumTimespan } from \"./millennium-timespan\";\nimport { MillenniumDateBuilder } from \"./millennium-date-builder\";\nimport { MillenniumTimeUnit } from \"./millennium-time-unit\";\n\n/**\n * The main Millennium class that holds date information.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport class MillenniumDate {\n\t\n\tprivate static readonly EPOCH_YEAR: number = 1970;\n\t\n\tprivate epochTime: number;\n\t\n\tprivate offsetHours: number;\n\t\n\tprivate constructor(epochTime: number, offsetHours?: number) {\n\t\t\n\t\tthis.epochTime = epochTime;\n\t\tthis.offsetHours = (offsetHours !== undefined ? offsetHours : 0);\n\t\t\n\t}\n\t\n\tpublic static fromNow(): MillenniumDate {\n\t\t\n\t\tlet now: Date = new Date();\n\t\treturn new MillenniumDate(now.getTime(), (-now.getTimezoneOffset() / 60));\n\t\t\n\t}\n\t\n\tpublic static fromDate(date: Date): MillenniumDate {\n\t\t\n\t\treturn new MillenniumDate(date.getTime(), (-date.getTimezoneOffset() / 60));\n\t\t\n\t}\n\t\n\tpublic static fromEpochTime(epochTime: number, offsetHours?: number): MillenniumDate {\n\t\t\n\t\treturn new MillenniumDate(epochTime, offsetHours);\n\t\t\n\t}\n\t\n\tpublic static fromTheBeginningOfTime(offsetHours?: number): MillenniumDate {\n\t\t\n\t\treturn new MillenniumDate(0, offsetHours);\n\t\t\n\t}\n\t\n\tpublic isYearLeapYear(): boolean {\n\t\t\n\t\treturn MillenniumDateMath.isYearLeapYear(this.getYear());\n\t\t\n\t}\n\t\n\tpublic getYear(): number {\n\t\t\n\t\tlet millisecondApproximation: number = this.getAdjustedEpochTime();\n\t\tlet yearApproximation: number = (MillenniumDate.EPOCH_YEAR + (millisecondApproximation / MillenniumTimeUnit.YEAR.getMilliseconds()));\n\t\tlet leapYearBeingInspected: number;\n\t\t\n\t\tif (this.getAdjustedEpochTime() >= 0) {\n\t\t\t\n\t\t\tleapYearBeingInspected = 1972;\n\t\t\t\n\t\t\twhile (leapYearBeingInspected < Math.floor(yearApproximation)) {\n\t\t\t\t\n\t\t\t\tif (MillenniumDateMath.isYearLeapYear(leapYearBeingInspected)) {\n\t\t\t\t\t\n\t\t\t\t\tmillisecondApproximation -= MillenniumTimeUnit.DAY.getMilliseconds();\n\t\t\t\t\tyearApproximation = (MillenniumDate.EPOCH_YEAR + (millisecondApproximation / MillenniumTimeUnit.YEAR.getMilliseconds()));\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tleapYearBeingInspected += 4;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\tleapYearBeingInspected = 1968;\n\t\t\t\n\t\t\twhile (leapYearBeingInspected > yearApproximation) {\n\t\t\t\t\n\t\t\t\tif (MillenniumDateMath.isYearLeapYear(leapYearBeingInspected)) {\n\t\t\t\t\t\n\t\t\t\t\tmillisecondApproximation += MillenniumTimeUnit.DAY.getMilliseconds();\n\t\t\t\t\tyearApproximation = (MillenniumDate.EPOCH_YEAR + (millisecondApproximation / MillenniumTimeUnit.YEAR.getMilliseconds()));\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tleapYearBeingInspected -= 4;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\treturn Math.floor(yearApproximation);\n\t\t\n\t}\n\t\n\tpublic getMonth(): MillenniumMonth {\n\t\t\n\t\tlet year: number = this.getYear();\n\t\tlet beginningOfYear: MillenniumDate = (new MillenniumDateBuilder()).withYear(year).build();\n\t\tlet dayInYear: number = MillenniumTimespan.between(beginningOfYear, this).toDays();\n\t\t\n\t\treturn MillenniumMonth.getMonthByDayInYear(dayInYear, year) as MillenniumMonth;\n\t\t\n\t}\n\t\n\tpublic getDayOfMonth(): number {\n\t\t\n\t\tlet beginningOfMonth: MillenniumDate =\n\t\t\t(new MillenniumDateBuilder())\n\t\t\t\t.withYear(this.getYear())\n\t\t\t\t.withMonth(this.getMonth())\n\t\t\t\t.build();\n\t\t\n\t\treturn (Math.floor(MillenniumTimespan.between(beginningOfMonth, this).toDays()) + 1);\n\t\t\n\t}\n\t\n\tpublic getHourOfDay24HourZeroIndexed(): number {\n\t\t\n\t\tlet beginningOfDay: MillenniumDate =\n\t\t\t(new MillenniumDateBuilder())\n\t\t\t.withYear(this.getYear())\n\t\t\t.withMonth(this.getMonth())\n\t\t\t.withDay(this.getDayOfMonth())\n\t\t\t.build();\n\t\t\n\t\treturn (Math.floor(MillenniumTimespan.between(beginningOfDay, this).toHours()));\n\t\t\n\t}\n\t\n\tpublic getHourOfDay24Hour(): number {\n\t\t\n\t\tlet zeroIndexed: number = this.getHourOfDay24HourZeroIndexed();\n\t\t\n\t\tif (zeroIndexed === 0) return 12;\n\t\telse return zeroIndexed + 1;\n\t\t\n\t}\n\t\n\tpublic getHourOfDay12Hour(): number {\n\t\t\n\t\treturn (this.getHourOfDay24Hour() % 13);\n\t\t\n\t}\n\t\n\tpublic get12HourPeriod(): string {\n\t\t\n\t\treturn (this.getHourOfDay24HourZeroIndexed() > 12 ? \"PM\" : \"AM\");\n\t\t\n\t}\n\t\n\tpublic getMinuteOfHour(): number {\n\t\t\n\t\tlet beginningOfHour: MillenniumDate =\n\t\t\t(new MillenniumDateBuilder())\n\t\t\t.withYear(this.getYear())\n\t\t\t.withMonth(this.getMonth())\n\t\t\t.withDay(this.getDayOfMonth())\n\t\t\t.withHours(this.getHourOfDay24HourZeroIndexed())\n\t\t\t.build();\n\t\t\n\t\treturn (Math.floor(MillenniumTimespan.between(beginningOfHour, this).toMinutes()));\n\t\t\n\t}\n\t\n\tpublic getSecondOfMinute(): number {\n\t\t\n\t\tlet beginningOfMinute: MillenniumDate =\n\t\t\t(new MillenniumDateBuilder())\n\t\t\t.withYear(this.getYear())\n\t\t\t.withMonth(this.getMonth())\n\t\t\t.withDay(this.getDayOfMonth())\n\t\t\t.withHours(this.getHourOfDay24HourZeroIndexed())\n\t\t\t.withMinutes(this.getMinuteOfHour())\n\t\t\t.build();\n\t\t\n\t\treturn (Math.floor(MillenniumTimespan.between(beginningOfMinute, this).toSeconds()));\n\t\t\n\t}\n\t\n\tpublic getMillisecondOfSecond(): number {\n\t\t\n\t\tlet beginningOfSecond: MillenniumDate =\n\t\t\t(new MillenniumDateBuilder())\n\t\t\t.withYear(this.getYear())\n\t\t\t.withMonth(this.getMonth())\n\t\t\t.withDay(this.getDayOfMonth())\n\t\t\t.withHours(this.getHourOfDay24HourZeroIndexed())\n\t\t\t.withMinutes(this.getMinuteOfHour())\n\t\t\t.withSeconds(this.getSecondOfMinute())\n\t\t\t.build();\n\t\t\n\t\treturn (Math.floor(MillenniumTimespan.between(beginningOfSecond, this).toMilliseconds()));\n\t\t\n\t}\n\t\n\tpublic getUTCOffset(): number {\n\t\t\n\t\treturn this.offsetHours;\n\t\t\n\t}\n\t\n\tpublic getEpochTime(): number {\n\t\t\n\t\treturn this.epochTime;\n\t\t\n\t}\n\t\n\tpublic getAdjustedEpochTime(): number {\n\t\t\n\t\treturn (this.getEpochTime() + (this.getUTCOffset() * MillenniumTimeUnit.HOUR.getMilliseconds()));\n\t\t\n\t}\n\t\n\tpublic toString(): string {\n\t\t\n\t\tlet month: string = this.getMonth().getMonthName();\n\t\tlet day: number = this.getDayOfMonth();\n\t\tlet ordinalIndicator: string = MillenniumDateMath.getOrdinalIndicator(day);\n\t\tlet year: number = this.getYear();\n\t\tlet utcString: string = \"(UTC\" + (this.getUTCOffset() >= 0 ? \"+\" : \"\") + this.getUTCOffset() + \")\";\n\t\tlet hour: string = this.getHourOfDay12Hour().toString();\n\t\tlet minute: string = this.getMinuteOfHour().toString();\n\t\tlet second: string = this.getSecondOfMinute().toString();\n\t\tlet millisecond: string = this.getMillisecondOfSecond().toString();\n\t\tlet period: string = this.get12HourPeriod();\n\t\t\n\t\twhile (minute.length < 2) minute = \"0\" + minute;\n\t\twhile (second.length < 2) second = \"0\" + second;\n\t\twhile (millisecond.length < 3) millisecond = \"0\" + millisecond;\n\t\t\n\t\treturn (\n\t\t\tmonth + \" \" + day + ordinalIndicator + \", \" + year + \" \" +\n\t\t\tutcString + \" \" + hour + \":\" + minute + \":\" + second + \".\" + millisecond + \" \" + period\n\t\t);\n\t\t\n\t}\n\t\n}"]}