{"version":3,"sources":["../ts/millennium-date-math.ts"],"names":["MillenniumDateMath","[object Object]","year","Math","floor","begin","end","firstLeapYear","min","lastLeapYear","max","isYearLeapYear","precursoryResult","abs","firstCentury","ceil","lastCentury","day","exports"],"mappings":"oEAaA,MAAaA,mBAEZC,eAEOA,sBAAsBC,GAI5B,OAFAA,EAAOC,KAAKC,MAAMF,IAEP,GAAM,IAEZA,EAAO,KAAQ,GAEVA,EAAO,KAAQ,GAgBnBD,gCAAgCI,EAAeC,GAErD,IAAIC,EAAwBJ,KAAKK,IAAIH,EAAOC,GACxCG,EAAuBN,KAAKO,IAAIL,EAAOC,GAAO,EAElD,MAAQN,mBAAmBW,eAAeJ,IAAgBA,IAC1D,MAAQP,mBAAmBW,eAAeF,IAAeA,IAEzD,GAAIF,EAAgBE,EAAc,OAAO,EACpC,CAEJ,IAAIG,EAA2BT,KAAKU,KAAKJ,EAAeF,GAAiB,GAAK,EAE1EO,EAAwD,IAAjCX,KAAKY,KAAKR,EAAgB,KACjDS,EAAuD,IAAjCb,KAAKC,MAAMK,EAAe,KAEpD,IAAK,IAAIP,EAAeY,EAAcZ,GAAQc,EAAad,GAAQ,IAE7DF,mBAAmBW,eAAeT,IAAOU,IAI/C,OAAOA,GAMFX,2BAA2BgB,GAEjC,OAAMA,EAAM,IAAQ,GAAc,KAARA,EAAmB,KACvCA,EAAM,IAAQ,GAAc,KAARA,EAAmB,KACvCA,EAAM,IAAQ,GAAc,KAARA,EAAmB,KACjC,MA7DdC,QAAAlB,mBAAAA","file":"millennium-date-math.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t5:52 PM -- March 07th, 2019.\n *\tProject: millennium\n */\n\n/**\n * A class containing various date math calculations used in determining dates from epoch/Unix times, leap years, etc.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport class MillenniumDateMath {\n\t\n\tprivate constructor() { /* Do nothing. */ }\n\t\n\tpublic static isYearLeapYear(year: number): boolean {\n\t\t\n\t\tyear = Math.floor(year);\n\t\t\n\t\tif (year % 4 === 0) {\n\t\t\t\n\t\t\tif (year % 100 === 0) {\n\t\t\t\t\n\t\t\t\treturn (year % 400 === 0);\n\t\t\t\t\n\t\t\t} else return true;\n\t\t\t\n\t\t} else return false;\n\t\t\n\t}\n\t\n\t/**\n\t * Returns the number of leap years between two years. The older date is inclusive while the newer date in\n\t * exclusive.\n\t *\n\t * @param {number} begin The year at which to begin counting leap years.\n\t * @param {number} end The year at which to stop counting leap years.\n\t * @returns {number} The number of leap years between the provided years.\n\t */\n\tpublic static getLeapYearsBetweenYears(begin: number, end: number): number {\n\t\t\n\t\tlet firstLeapYear: number = Math.min(begin, end);\n\t\tlet lastLeapYear: number = Math.max(begin, end) - 1;\n\t\t\n\t\twhile (!MillenniumDateMath.isYearLeapYear(firstLeapYear)) firstLeapYear++;\n\t\twhile (!MillenniumDateMath.isYearLeapYear(lastLeapYear)) lastLeapYear--;\n\t\t\n\t\tif (firstLeapYear > lastLeapYear) return 0;\n\t\telse {\n\t\t\t\n\t\t\tlet precursoryResult: number = Math.abs((lastLeapYear - firstLeapYear) / 4) + 1;\n\t\t\t\n\t\t\tlet firstCentury: number = Math.ceil(firstLeapYear / 100) * 100;\n\t\t\tlet lastCentury: number = Math.floor(lastLeapYear / 100) * 100;\n\t\t\t\n\t\t\tfor (let year: number = firstCentury; year <= lastCentury; year += 100) {\n\t\t\t\t\n\t\t\t\tif (!MillenniumDateMath.isYearLeapYear(year)) precursoryResult--;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\treturn precursoryResult;\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\tpublic static getOrdinalIndicator(day: number): string {\n\t\t\n\t\tif (((day % 10) === 1) && day !== 11) return \"st\";\n\t\tif (((day % 10) === 2) && day !== 12) return \"nd\";\n\t\tif (((day % 10) === 3) && day !== 13) return \"rd\";\n\t\telse return \"th\";\n\t\t\n\t}\n\t\n}"]}