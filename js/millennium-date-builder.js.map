{"version":3,"sources":["../ts/millennium-date-builder.ts"],"names":["builder_base_1","require","millennium_date_1","millennium_date_math_1","millennium_time_unit_1","MillenniumDateBuilder","BuilderBase","[object Object]","super","this","addOptionals","year","fulfillRequirement","month","day","Error","hours","minutes","seconds","milliseconds","offsetHours","checkFulfillment","getValueOfRequirement","MillenniumDateMath","getLeapYearsBetweenYears","MillenniumTimeUnit","DAY","getMilliseconds","relevantYear","getDaysSinceBeginningOfYear","HOUR","MINUTE","SECOND","MILLISECOND","MillenniumDate","fromEpochTime","exports"],"mappings":"oEAMA,MAAAA,eAAAC,QAAA,gBACAC,kBAAAD,QAAA,qBACAE,uBAAAF,QAAA,0BACAG,uBAAAH,QAAA,0BAUA,MAAaI,8BAA8BL,eAAAM,YAE1CC,cAECC,QAEAC,KAAKC,aACJ,OACA,QACA,MACA,QACA,UACA,UACA,eACA,UAKKH,SAASI,GAIf,OAFAF,KAAKG,mBAAmB,OAAQD,GAEzBF,KAIDF,UAAUM,GAIhB,OAFAJ,KAAKG,mBAAmB,QAASC,GAE1BJ,KAIDF,QAAQO,GAEd,GAAY,IAARA,EAAW,MAAM,IAAIC,MAAM,8FAI/B,OAHSD,EAAM,EAAGL,KAAKG,mBAAmB,MAAOE,EAAM,GAC9CA,EAAM,GAAGL,KAAKG,mBAAmB,MAAOE,GAE1CL,KAIDF,mBAAmBO,GAIzB,OAFAL,KAAKG,mBAAmB,MAAOE,GAExBL,KAIDF,UAAUS,GAIhB,OAFAP,KAAKG,mBAAmB,QAASI,GAE1BP,KAIDF,YAAYU,GAIlB,OAFAR,KAAKG,mBAAmB,UAAWK,GAE5BR,KAIDF,YAAYW,GAIlB,OAFAT,KAAKG,mBAAmB,UAAWM,GAE5BT,KAIDF,iBAAiBY,GAIvB,OAFAV,KAAKG,mBAAmB,eAAgBO,GAEjCV,KAIDF,WAAWa,GAIjB,OAFAX,KAAKG,mBAAmB,SAAUQ,GAE3BX,KAIDF,QAEN,IAAIY,EAAuB,EAE3B,GAAIV,KAAKY,iBAAiB,QAAS,CAElC,IAAIV,EAAeF,KAAKa,sBAAsB,QAG9CH,IAAmC,KAAfR,EAAO,MAFHR,uBAAAoB,mBAAmBC,yBAAyB,KAAMb,IAEnBP,uBAAAqB,mBAAmBC,IAAIC,kBAI/E,GAAIlB,KAAKY,iBAAiB,SAAU,CAEnC,IAAIR,EAAyBJ,KAAKa,sBAAsB,SACpDM,EAAwBnB,KAAKY,iBAAiB,QAAUZ,KAAKa,sBAAsB,QAAU,KAGjGH,GAFuCN,EAAMgB,4BAA4BD,GAE7BxB,uBAAAqB,mBAAmBC,IAAIC,kBAwCpE,OApCIlB,KAAKY,iBAAiB,SAEzBF,GAAiBV,KAAKa,sBAAsB,OAASlB,uBAAAqB,mBAAmBC,IAAIC,mBAIzElB,KAAKY,iBAAiB,WAEzBF,GAAiBV,KAAKa,sBAAsB,SAAWlB,uBAAAqB,mBAAmBK,KAAKH,mBAI5ElB,KAAKY,iBAAiB,aAEzBF,GAAiBV,KAAKa,sBAAsB,WAAalB,uBAAAqB,mBAAmBM,OAAOJ,mBAIhFlB,KAAKY,iBAAiB,aAEzBF,GAAiBV,KAAKa,sBAAsB,WAAalB,uBAAAqB,mBAAmBO,OAAOL,mBAIhFlB,KAAKY,iBAAiB,kBAEzBF,GAAiBV,KAAKa,sBAAsB,gBAAkBlB,uBAAAqB,mBAAmBQ,YAAYN,mBAI1FlB,KAAKY,iBAAiB,YAEzBF,GAAiBV,KAAKa,sBAAsB,UAAYlB,uBAAAqB,mBAAmBK,KAAKH,mBAI7ElB,KAAKY,iBAAiB,UAAkBnB,kBAAAgC,eAAeC,cAAchB,EAAcV,KAAKa,sBAAsB,WACtGpB,kBAAAgC,eAAeC,cAAchB,IAzJ3CiB,QAAA/B,sBAAAA","file":"millennium-date-builder.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t9:18 PM -- March 07th, 2019.\n *\tProject: millennium\n */\n\nimport { BuilderBase } from \"builder-base\";\nimport { MillenniumDate } from \"./millennium-date\";\nimport { MillenniumDateMath } from \"./millennium-date-math\";\nimport { MillenniumTimeUnit } from \"./millennium-time-unit\";\nimport { MillenniumMonth } from \"./millennium-month\";\n\n/**\n *\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport class MillenniumDateBuilder extends BuilderBase<MillenniumDate> {\n\n\tpublic constructor() {\n\n\t\tsuper();\n\n\t\tthis.addOptionals(\n\t\t\t\"year\",\n\t\t\t\"month\",\n\t\t\t\"day\",\n\t\t\t\"hours\",\n\t\t\t\"minutes\",\n\t\t\t\"seconds\",\n\t\t\t\"milliseconds\",\n\t\t\t\"offset\"\n\t\t);\n\n\t}\n\n\tpublic withYear(year: number): MillenniumDateBuilder {\n\n\t\tthis.fulfillRequirement(\"year\", year);\n\n\t\treturn this;\n\n\t}\n\n\tpublic withMonth(month: MillenniumMonth): MillenniumDateBuilder {\n\n\t\tthis.fulfillRequirement(\"month\", month);\n\n\t\treturn this;\n\n\t}\n\n\tpublic withDay(day: number): MillenniumDateBuilder {\n\n\t\tif (day === 0) throw new Error(\"ERR | Day 0 does not exist. Did you mean to call TSDateBuilder#withDayZeroIndexed(number)?\");\n\t\telse if (day > 0) this.fulfillRequirement(\"day\", day - 1);\n\t\telse if (day < 0) this.fulfillRequirement(\"day\", day);\n\n\t\treturn this;\n\n\t}\n\n\tpublic withDayZeroIndexed(day: number): MillenniumDateBuilder {\n\n\t\tthis.fulfillRequirement(\"day\", day);\n\n\t\treturn this;\n\n\t}\n\n\tpublic withHours(hours: number): MillenniumDateBuilder {\n\n\t\tthis.fulfillRequirement(\"hours\", hours);\n\n\t\treturn this;\n\n\t}\n\n\tpublic withMinutes(minutes: number): MillenniumDateBuilder {\n\n\t\tthis.fulfillRequirement(\"minutes\", minutes);\n\n\t\treturn this;\n\n\t}\n\n\tpublic withSeconds(seconds: number): MillenniumDateBuilder {\n\n\t\tthis.fulfillRequirement(\"seconds\", seconds);\n\n\t\treturn this;\n\n\t}\n\n\tpublic withMilliseconds(milliseconds: number): MillenniumDateBuilder {\n\n\t\tthis.fulfillRequirement(\"milliseconds\", milliseconds);\n\n\t\treturn this;\n\n\t}\n\n\tpublic withOffset(offsetHours: number): MillenniumDateBuilder {\n\n\t\tthis.fulfillRequirement(\"offset\", offsetHours);\n\n\t\treturn this;\n\n\t}\n\n\tpublic build(): MillenniumDate {\n\n\t\tlet milliseconds: number = 0;\n\n\t\tif (this.checkFulfillment(\"year\")) {\n\n\t\t\tlet year: number = this.getValueOfRequirement(\"year\");\n\t\t\tlet leapYears: number = MillenniumDateMath.getLeapYearsBetweenYears(1970, year);\n\n\t\t\tmilliseconds += ((((year - 1970) * 365) + leapYears) * MillenniumTimeUnit.DAY.getMilliseconds());\n\n\t\t}\n\n\t\tif (this.checkFulfillment(\"month\")) {\n\n\t\t\tlet month: MillenniumMonth = this.getValueOfRequirement(\"month\");\n\t\t\tlet relevantYear: number = (this.checkFulfillment(\"year\") ? this.getValueOfRequirement(\"year\") : 1970);\n\t\t\tlet daysSinceBeginningOfYear: number = month.getDaysSinceBeginningOfYear(relevantYear);\n\n\t\t\tmilliseconds += (daysSinceBeginningOfYear * MillenniumTimeUnit.DAY.getMilliseconds());\n\n\t\t}\n\n\t\tif (this.checkFulfillment(\"day\")) {\n\n\t\t\tmilliseconds += (this.getValueOfRequirement(\"day\") * MillenniumTimeUnit.DAY.getMilliseconds());\n\n\t\t}\n\n\t\tif (this.checkFulfillment(\"hours\")) {\n\n\t\t\tmilliseconds += (this.getValueOfRequirement(\"hours\") * MillenniumTimeUnit.HOUR.getMilliseconds());\n\n\t\t}\n\n\t\tif (this.checkFulfillment(\"minutes\")) {\n\n\t\t\tmilliseconds += (this.getValueOfRequirement(\"minutes\") * MillenniumTimeUnit.MINUTE.getMilliseconds());\n\n\t\t}\n\n\t\tif (this.checkFulfillment(\"seconds\")) {\n\n\t\t\tmilliseconds += (this.getValueOfRequirement(\"seconds\") * MillenniumTimeUnit.SECOND.getMilliseconds());\n\n\t\t}\n\n\t\tif (this.checkFulfillment(\"milliseconds\")) {\n\n\t\t\tmilliseconds += (this.getValueOfRequirement(\"milliseconds\") * MillenniumTimeUnit.MILLISECOND.getMilliseconds());\n\n\t\t}\n\n\t\tif (this.checkFulfillment(\"offset\")) {\n\n\t\t\tmilliseconds -= (this.getValueOfRequirement(\"offset\") * MillenniumTimeUnit.HOUR.getMilliseconds());\n\n\t\t}\n\n\t\tif (this.checkFulfillment(\"offset\")) return MillenniumDate.fromEpochTime(milliseconds, this.getValueOfRequirement(\"offset\"));\n\t\telse return MillenniumDate.fromEpochTime(milliseconds);\n\n\t}\n}"]}